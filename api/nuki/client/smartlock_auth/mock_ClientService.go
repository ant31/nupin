// Code generated by mockery v2.20.0. DO NOT EDIT.

package smartlock_auth

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// SmartlockAuthResourceDeleteDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlockAuthResourceDeleteDelete(params *SmartlockAuthResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourceDeleteDeleteNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlockAuthResourceDeleteDeleteNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlockAuthResourceDeleteDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlockAuthResourceDeleteDeleteNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlockAuthResourceDeleteDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlockAuthResourceDeleteDeleteNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlockAuthResourceDeleteDeleteNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlockAuthResourceDeleteDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlockAuthResourceGetGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlockAuthResourceGetGet(params *SmartlockAuthResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourceGetGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlockAuthResourceGetGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlockAuthResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlockAuthResourceGetGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlockAuthResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlockAuthResourceGetGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlockAuthResourceGetGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlockAuthResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlockAuthResourcePostPost provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlockAuthResourcePostPost(params *SmartlockAuthResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourcePostPostNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlockAuthResourcePostPostNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlockAuthResourcePostPostParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlockAuthResourcePostPostNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlockAuthResourcePostPostParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlockAuthResourcePostPostNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlockAuthResourcePostPostNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlockAuthResourcePostPostParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlockAuthsResourceGetGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlockAuthsResourceGetGet(params *SmartlockAuthsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthsResourceGetGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlockAuthsResourceGetGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlockAuthsResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlockAuthsResourceGetGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlockAuthsResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlockAuthsResourceGetGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlockAuthsResourceGetGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlockAuthsResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlockAuthsResourcePutPut provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlockAuthsResourcePutPut(params *SmartlockAuthsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthsResourcePutPutNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlockAuthsResourcePutPutNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlockAuthsResourcePutPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlockAuthsResourcePutPutNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlockAuthsResourcePutPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlockAuthsResourcePutPutNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlockAuthsResourcePutPutNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlockAuthsResourcePutPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlocksAuthsResourceDeleteDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlocksAuthsResourceDeleteDelete(params *SmartlocksAuthsResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourceDeleteDeleteNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlocksAuthsResourceDeleteDeleteNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourceDeleteDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlocksAuthsResourceDeleteDeleteNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourceDeleteDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlocksAuthsResourceDeleteDeleteNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlocksAuthsResourceDeleteDeleteNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlocksAuthsResourceDeleteDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlocksAuthsResourceGetGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlocksAuthsResourceGetGet(params *SmartlocksAuthsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourceGetGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlocksAuthsResourceGetGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlocksAuthsResourceGetGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlocksAuthsResourceGetGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlocksAuthsResourceGetGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlocksAuthsResourceGetGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlocksAuthsResourcePostPost provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlocksAuthsResourcePostPost(params *SmartlocksAuthsResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourcePostPostNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlocksAuthsResourcePostPostNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourcePostPostParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlocksAuthsResourcePostPostNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourcePostPostParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlocksAuthsResourcePostPostNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlocksAuthsResourcePostPostNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlocksAuthsResourcePostPostParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SmartlocksAuthsResourcePutPut provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SmartlocksAuthsResourcePutPut(params *SmartlocksAuthsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourcePutPutNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SmartlocksAuthsResourcePutPutNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourcePutPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SmartlocksAuthsResourcePutPutNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SmartlocksAuthsResourcePutPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SmartlocksAuthsResourcePutPutNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SmartlocksAuthsResourcePutPutNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*SmartlocksAuthsResourcePutPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClientService(t mockConstructorTestingTNewMockClientService) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
